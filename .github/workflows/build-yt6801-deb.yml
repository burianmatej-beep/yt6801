name: Build yt6801 .deb (Proxmox 9 / trixie)

on:
  workflow_dispatch:
    inputs:
      kernel_version:
        description: "Proxmox kernel version (e.g. 6.14.8-2-pve)"
        required: true
        default: "6.14.8-2-pve"

jobs:
  build:
    runs-on: ubuntu-latest
    # Běží uvnitř Debianu 13 (trixie), aby šly použít Debian/Proxmox repa
    container:
      image: debian:trixie

    env:
      DEBIAN_FRONTEND: noninteractive

    steps:
      - name: Checkout repository (your fork of silent-reader-cn/yt6801)
        uses: actions/checkout@v4

      - name: Set KVER from workflow input
        run: echo "KVER=${{ github.event.inputs.kernel_version }}" >> $GITHUB_ENV

      - name: Show chosen kernel version
        run: echo "Building for KVER=${KVER}"

      - name: Install base tools and import Proxmox apt key
        run: |
          set -eux
          apt-get update
          apt-get install -y --no-install-recommends \
            ca-certificates curl gnupg lsb-release \
            build-essential make git kmod bc xz-utils dpkg-dev fakeroot

          install -d -m 0755 /etc/apt/keyrings
          curl -fsSL https://enterprise.proxmox.com/debian/proxmox-release-trixie.gpg \
            | gpg --dearmor > /etc/apt/keyrings/proxmox-release.gpg

          echo "deb [signed-by=/etc/apt/keyrings/proxmox-release.gpg] http://download.proxmox.com/debian/pve trixie pve-no-subscription" \
            > /etc/apt/sources.list.d/proxmox-trixie.list

          apt-get update

      - name: Install Proxmox kernel headers for ${{ env.KVER }}
        run: |
          set -eux
          apt-get install -y --no-install-recommends "proxmox-headers-${KVER}"
          ls -ld "/usr/src/linux-headers-${KVER}"

      - name: Build yt6801 kernel module against Proxmox headers
        working-directory: ./src
        run: |
          set -eux
          make -C "/usr/src/linux-headers-${KVER}" M="$PWD" clean modules
          ls -lh yt6801.ko

      - name: Package .deb (yt6801-driver_${{ env.KVER }}.deb)
        working-directory: .
        run: |
          set -eux
          PKGDIR=pkg
          install -d "${PKGDIR}/DEBIAN" "${PKGDIR}/lib/modules/${KVER}/updates"

          # Zkopíruj zbuildovaný modul
          install -m 0644 "src/yt6801.ko" "${PKGDIR}/lib/modules/${KVER}/updates/yt6801.ko"

          # DEBIAN/control
          cat > "${PKGDIR}/DEBIAN/control" <<EOF
          Package: yt6801-driver
          Version: ${KVER}
          Section: kernel
          Priority: optional
          Architecture: amd64
          Maintainer: ${GITHUB_REPOSITORY}
          Description: YT6801 (Fuxi GMAC) Ethernet driver module for Proxmox kernel ${KVER}
          Depends:
          EOF

          # Postinst: zaregistruj modul a přegeneruj moduly
          cat > "${PKGDIR}/DEBIAN/postinst" <<'EOF'
          #!/bin/sh
          set -e
          KVER="$(dpkg-deb --info "$0" 2>/dev/null | sed -n 's/^ Version: //p')"
          # Pokud dpkg-deb není k dispozici v tomto kontextu, použij uložený název balíčku:
          if [ -z "$KVER" ]; then KVER="$(basename "$(dpkg -s yt6801-driver 2>/dev/null | sed -n 's/^Version: //p')")"; fi
          # Fallback: pokud by to selhalo, vytáhni ze skutečné cesty instalace:
          [ -z "$KVER" ] && KVER="$(ls -1 /lib/modules | grep pve | sort -V | tail -n1)"

          # Zapiš modul do /etc/modules, pokud tam není
          if ! grep -q '^yt6801$' /etc/modules 2>/dev/null; then
            echo yt6801 >> /etc/modules
          fi

          # Přegeneruj moduly pro běžící jádro i cílové KVER
          depmod -a || true
          [ -n "$KVER" ] && depmod -a "$KVER" || true

          exit 0
          EOF
          chmod 0755 "${PKGDIR}/DEBIAN/postinst"

          # Postrm: úklid
          cat > "${PKGDIR}/DEBIAN/postrm" <<'EOF'
          #!/bin/sh
          set -e
          # necháme /etc/modules s yt6801, aby po případné reinstalaci zůstal
          exit 0
          EOF
          chmod 0755 "${PKGDIR}/DEBIAN/postrm"

          dpkg-deb --build "${PKGDIR}" "yt6801-driver_${KVER}.deb"
          ls -lh "yt6801-driver_${KVER}.deb"

      - name: Upload artifact (.deb)
        uses: actions/upload-artifact@v4
        with:
          name: yt6801-driver_${{ env.KVER }}
          path: yt6801-driver_${{ env.KVER }}.deb
          if-no-files-found: error
